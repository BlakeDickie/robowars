/*
 * EditorFrame.java
 *
 * Created on July 4, 2004, 12:06 PM
 */

package robowars.editor;

import robowars.common.*;
import robowars.editor.typepanels.*;

import java.util.*;
import java.sql.*;
import javax.swing.tree.*;
import javax.swing.*;
import java.awt.CardLayout;

/**
 *
 * @author  bdickie
 */
public class EditorFrame extends javax.swing.JFrame {
    private CardTypeManager cardTypes = CardTypeManager.getInstance();
    private DatabaseConnector conn = DatabaseConnector.getInstance();
    
    private int currentCardID = -1;
    private String currentCardName;
    private CardDetailsEditor currentEditor;
    private Map detailPanels = new HashMap();
    
    /** Creates new form EditorFrame */
    public EditorFrame() {
        initComponents();
        initalizeEditorPanels();
        loadCards();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        treeCards = new javax.swing.JTree();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cboRarity = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cboSet = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFlavour = new javax.swing.JTextArea();
        txtText = new javax.swing.JTextArea();
        panDetails = new javax.swing.JPanel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setTitle("Robo Wars Card Editor");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        treeCards.setModel(loadCards());
        treeCards.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeCardsOnClicked(evt);
            }
        });

        jScrollPane1.setViewportView(treeCards);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 3, 160, 330));

        jButton1.setText("New Card");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 340, -1, -1));

        jLabel1.setText("Name:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, -1, -1));

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        getContentPane().add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 150, -1));

        jLabel2.setText("Rarity:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, -1, -1));

        cboRarity.setModel(getRarityListModel());
        getContentPane().add(cboRarity, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, -1, -1));

        jLabel3.setText("Set:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, -1, -1));

        cboSet.setModel(getSetModel());
        getContentPane().add(cboSet, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, -1, -1));

        jLabel4.setText("Text:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, -1, -1));

        jLabel5.setText("Flavour:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, -1, -1));

        txtFlavour.setLineWrap(true);
        txtFlavour.setWrapStyleWord(true);
        txtFlavour.setBorder(new javax.swing.border.EtchedBorder());
        getContentPane().add(txtFlavour, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 120, 180, 107));

        txtText.setLineWrap(true);
        txtText.setWrapStyleWord(true);
        txtText.setBorder(new javax.swing.border.EtchedBorder());
        getContentPane().add(txtText, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, 197, 107));

        panDetails.setLayout(new java.awt.CardLayout());

        getContentPane().add(panDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, 390, 130));

        pack();
    }//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void treeCardsOnClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeCardsOnClicked
        TreePath selectionPath = treeCards.getSelectionPath();
        if (selectionPath == null)
        {
            System.out.println("null");
            return;
        }
        saveCurrentCard();
        if (selectionPath.getPathCount() != 3)
        {
            return;
        }
        
        String selectedItem = selectionPath.getLastPathComponent().toString();
        currentCardID = Integer.parseInt(conn.singleResultQuery("Select card_id From Cards Where card_name = '" + conn.makeSingleSafe(selectedItem) + "'"));
        loadCurrentCard();
        
    }//GEN-LAST:event_treeCardsOnClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String type = SupportFunctions.depluralize(getCardType());
        int typeID = Integer.parseInt(conn.singleResultQuery("Select type_id From CardTypes Where type_name = '" + conn.makeSingleSafe(type) + "'"));
        
        String name = "New " + type;
        while(checkForConflictedName(name, -1))
            name = name + "*";
        String sql = "Insert Into Cards(card_name, type_id) Values ('" + conn.makeSingleSafe(name) + "', " + typeID + ")";
        try {
            conn.doExecute(sql);
            String cardID = conn.singleResultQuery("Select card_id From Cards Where card_name = '" + conn.makeSingleSafe(name) + "'");
            sql = "Insert Into " + SupportFunctions.pluralize(type) + "(card_id) Values (" + cardID + ")";
            conn.doExecute(sql);
            
            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(name);
            DefaultMutableTreeNode parent = getCardTypeNode();
            DefaultTreeModel model = (DefaultTreeModel)treeCards.getModel();
            model.insertNodeInto(newNode, parent, 0);
            
            treeCards.setSelectionPath(new TreePath(newNode.getPath()));
            treeCardsOnClicked(null);
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error Creating Card");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        saveCurrentCard();
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    public DefaultTreeModel loadCards() {
        try {
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("Robo Wars Cards");
            Set types = cardTypes.getTypes();
            Iterator i = types.iterator();
            while(i.hasNext()) {
                String type = i.next().toString();
                String typePlural = SupportFunctions.pluralize(type);
                DefaultMutableTreeNode typeTree = new DefaultMutableTreeNode(typePlural);
                root.add(typeTree);
                ResultSet rs = conn.doQuery("Select card_name from Cards as C Inner Join CardTypes As T On C.type_id = T.type_id Where T.type_name = '" + type + "' Order By C.card_name");
                while(rs.next())
                    typeTree.add(new DefaultMutableTreeNode(rs.getString("card_name")));
            }
            return new DefaultTreeModel(root);
        }
        catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    private DefaultComboBoxModel getRarityListModel()
    {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {
            ResultSet rs = conn.doQuery("Select rarity_name From Rarity");
            while(rs.next())
                model.addElement(rs.getString(1));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return model;
    }
    
    
    private DefaultComboBoxModel getSetModel()
    {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        try {
            ResultSet rs = conn.doQuery("Select set_name From Sets");
            while(rs.next())
                model.addElement(rs.getString(1));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return model;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new EditorFrame().show();
    }
    
    public String getCardType()
    {
        TreePath selectionPath = treeCards.getSelectionPath();
        if (selectionPath.getPathCount() == 1)
            return null;
        return selectionPath.getPathComponent(1).toString();
    }
    
    public DefaultMutableTreeNode getCardTypeNode()
    {
        TreePath selectionPath = treeCards.getSelectionPath();
        if (selectionPath.getPathCount() == 1)
            return null;
        return (DefaultMutableTreeNode)selectionPath.getPathComponent(1);
    }
    
    public void renameNode(String oldName, String newName)
    {
        DefaultTreeModel model = (DefaultTreeModel)treeCards.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)model.getRoot();
        
        DefaultMutableTreeNode leaf = root.getFirstLeaf();
        while (leaf != null)
        {
            if (leaf.getUserObject().equals(oldName))
            {
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode)leaf.getParent();
                leaf.setUserObject(newName);
                model.nodeChanged(leaf);
                
                return;
            }
            leaf = leaf.getNextLeaf();
        }
        
    }
    
    public void saveCurrentCard()
    {
        if (currentCardID < 1)
            return;
        
        while (checkForConflictedName(txtName.getText(), currentCardID))
            txtName.setText(txtName.getText() + "*");
        
        HashMap details = new HashMap();
        renameNode(currentCardName,  txtName.getText());
        currentCardName = txtName.getText();
        details.put("card_name", txtName.getText());
        details.put("card_text", txtText.getText());
        details.put("card_flavour", txtFlavour.getText());
        details.put("rarity_id", getSelectedRarityID());
        details.put("set_id", getSelectedSetID());
        saveToTable("Cards", details);
        
        if (currentEditor != null)
        {
            
            details = new HashMap();
            currentEditor.saveDetails(details);
            String sql = "Select type_name From Cards as C Inner Join CardTypes as T On C.type_id = T.type_id Where C.card_id = " + currentCardID;
            String type = conn.singleResultQuery(sql);
            saveToTable(SupportFunctions.pluralize(type), details);
        }
        
        
    }
    
    public boolean saveToTable(String tableName, Map values)
    {
        StringBuffer sql = new StringBuffer();
        sql.append("Update " + tableName + " Set ");
        
        Iterator i = values.keySet().iterator();
        while(i.hasNext())
        {
            String name = i.next().toString();
            sql.append(name);
            sql.append(" = '");
            sql.append(conn.makeSingleSafe(values.get(name).toString()));
            sql.append("'");
            if (i.hasNext())
                sql.append(", ");
        }
        sql.append(" Where card_id = ");
        sql.append("" + currentCardID);
        try {
        conn.doUpdate(sql.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return true;
    }
    
    public String getSelectedRarityID()
    {
        return conn.singleResultQuery("Select rarity_id From Rarity Where rarity_name = '" + conn.makeSingleSafe(cboRarity.getSelectedItem().toString()) + "'");
    }
    
    public String getSelectedSetID()
    {
        return conn.singleResultQuery("Select set_id From Sets Where set_name = '" + conn.makeSingleSafe(cboSet.getSelectedItem().toString()) + "'");
    }
    
    public void loadCurrentCard()
    {
        if (currentCardID < 1)
            return;
        String sql = "Select type_name From Cards as C Inner Join CardTypes as T On C.type_id = T.type_id Where C.card_id = " + currentCardID;
        String type = conn.singleResultQuery(sql);
        String typePlural = SupportFunctions.pluralize(type);
        sql = "SELECT C.card_name, C.card_text, C.card_flavour, C.card_picture, T.*, S.set_name, R.rarity_name FROM (Cards as C Inner Join " + typePlural + " as T On C.card_id = T.card_id) Inner Join Sets as S On C.set_id = S.set_id Inner Join Rarity as R On C.rarity_id = R.rarity_id Where C.card_id = " + currentCardID;
        try {
            ResultSet rs = conn.doQuery(sql);
            rs.next();
            cboRarity.setSelectedItem(rs.getString("rarity_name"));
            cboSet.setSelectedItem(rs.getString("set_name"));
            currentCardName = rs.getString("card_name");
            txtName.setText(rs.getString("card_name"));
            txtText.setText(rs.getString("card_text"));
            txtFlavour.setText(rs.getString("card_flavour"));
            switchDetailsTo(type);
            if (currentEditor != null)
                currentEditor.loadDetails(rs);
            rs.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error Reading Card");
        }
    }
    
    
    private void initalizeEditorPanels()
    {
        Set types = cardTypes.getTypes();
        Iterator i = types.iterator();

        panDetails.add(new JPanel(), "empty");
        while (i.hasNext())
        {
            String type = i.next().toString();
            CardDetailsEditor panel = cardTypes.getEditorPanelFor(type);
            if (panel != null)
            {
                detailPanels.put(type, panel);
                panDetails.add(panel, type);
            }
        }
    }
    
    private void switchDetailsTo(String type)
    {
        CardLayout cLay = (CardLayout)panDetails.getLayout();
        if (detailPanels.containsKey(type))
        {
            cLay.show(panDetails, type);
            currentEditor = (CardDetailsEditor)detailPanels.get(type);
        }
        else
        {
            cLay.show(panDetails, "empty");
            currentEditor = null;
        }
    }
    
    private boolean checkForConflictedName(String name, int cardID)
    {
        String sql = "Select count(*) From Cards Where (card_name = '" + conn.makeSingleSafe(name) + "') AND (card_id <> " + cardID + ")";
        return (!conn.singleResultQuery(sql).equals("0"));
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboRarity;
    private javax.swing.JComboBox cboSet;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panDetails;
    private javax.swing.JTree treeCards;
    private javax.swing.JTextArea txtFlavour;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextArea txtText;
    // End of variables declaration//GEN-END:variables
    
}
